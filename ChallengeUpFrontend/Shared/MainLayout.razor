@inherits LayoutComponentBase
@using ChallengeUpFrontend.Models
@inject NavigationManager Navigation
@inject IJSRuntime JS
@using System.Text.Json
@inject HttpClient Http

@code {
	private PlayerLogin? Login;	
    private UserStats? stats;

    private bool ShouldHideLayout => Navigation.Uri.Contains("/login");
    private bool showStreakLostPopup = false;

	private string? error;
    private System.Threading.Timer? timer;

    protected override async Task OnInitializedAsync()
    {
     	string json = await WaitForSessionStorageAsync("LoginInfo");
		Login = JsonSerializer.Deserialize<PlayerLogin>(json);

		timer = new System.Threading.Timer(async _ =>
        {
            await LoadStats();
            await InvokeAsync(StateHasChanged); // Refresh UI on the main thread
        }, null, TimeSpan.Zero, TimeSpan.FromSeconds(10));
    }

	private async Task<string> WaitForSessionStorageAsync(string key, int delayMs = 500)
	{
    	string value = null!;
    	while (string.IsNullOrEmpty(value))
    	{
        	value = await JS.InvokeAsync<string>("sessionStorage.getItem", key);
        	if (string.IsNullOrEmpty(value))
        	{
            	await Task.Delay(delayMs); // wait before trying again
        	}
    	}
    	return value;
	}

	private async Task LoadStats()
	{
    	var url = $"http://localhost:8080/?Command=GetPlayerStats&Extra={Uri.EscapeDataString($"{Login.UserName}")}";
    	var response = await SendRequest(url);

    	if (IsJson(response))
    	{
    		// It's JSON → parse to object
    		error = null;
    		stats = JsonSerializer.Deserialize<UserStats>(response);
            await JS.InvokeVoidAsync("sessionStorage.setItem", "UserStats", response);
		}
    	else
    	{
    		// It's just a plain string
    		error = $"Unable to get Challenge, try agian later";
    	}
    }

    public void Dispose()
    {
        timer?.Dispose();
    }

    private async Task<string> SendRequest(string url)
    {
        try
        {
            var response = await Http.GetAsync(url);
            response.EnsureSuccessStatusCode();
            string result = await response.Content.ReadAsStringAsync();
            return result;
        }
        catch (Exception ex)
        {
            return $"Error: {ex.Message}";
        }
    }
    
    private void ToggleShop()
    {
        // This is a placeholder — you'll replace it with real shop logic later
        Console.WriteLine("Shop clicked");
    }

    private async Task LogMessage()
    {
        await JS.InvokeVoidAsync("console.log", JsonSerializer.Serialize(stats));
    }

    bool IsJson(string response) =>
        response.TrimStart().StartsWith("{") || response.TrimStart().StartsWith("[");
}

<div class="d-flex flex-column min-vh-100">

    <!-- Top Stats Bar -->
    @if (!ShouldHideLayout && stats != null)
    {
        <div class="d-flex justify-content-around align-items-center my-3 py-2 px-4 bg-light shadow-sm rounded-pill mx-auto" style="width: 98%;">
            
            <!-- Streak -->
            <div class="streak-container position-relative">
                <img src="images/fire-icon.png" width="22" alt="Streak" class="hoverable-streak-icon" />
                <span class="fw-bold text-black">@stats?.Days</span>

                <!-- Tooltip-like popover -->
                <div class="streak-popover">
                    <div class="d-flex justify-content-between text-center">
                        @for(int i = -6; i <= 0; i++)
                        {
                            <div class="mx-1">
                                <div class="streak-day-circle">
                                    @{
                                        DateTime date = DateTime.Today.AddDays(i);
                                        string? icon = null;

                                    	if (i == 0)
                                    	{
                                    		icon = "clock-icon.gif";
                                    	}
                                        else if (stats.Last7Days.ElementAt(6+i))
                                        {
                                        	icon = "fire-icon.gif";
                                        }
                                        else
                                        {
                                            icon = "512.gif";
                                        }

                                    }

                                    @if (!string.IsNullOrEmpty(icon))
                                    {
                                        <img src="images/@icon" width="18" />
                                    }

                                </div>
                                <div class="day-label">@DateTime.Today.AddDays(i).ToString("ddd")</div>
                            </div>
                        }
                    </div>
                </div>
            </div>

            <!-- Gems -->
            <div class="d-flex align-items-center gap-1">
                <img src="images/gem-icon.png" width="22" alt="Gems" />
                <span class="fw-bold text-black">@stats?.Gems</span>
            </div>

            <!-- Score -->
            <div class="d-flex align-items-center gap-1">
                <img src="images/star-icon.png" width="22" alt="Score" />
                <span class="fw-bold text-black">@stats?.Points</span>
            </div>
        </div>
    }

    <!-- Page Body -->
    <main class="flex-grow-1 px-4">
        @if (showStreakLostPopup)
        {
            <div class="popup-overlay">
                <div class="popup-content text-center">
                    <h5 class="mb-2">
                        <img src="images/rolling-eyes.gif" alt="Fire" width="24" style="vertical-align: middle; margin-right: 6px;" />
                        You lost your streak!
                    </h5>

                    <p>Quick! Revive it in the shop!</p>
                    <button class="btn btn-warning mt-2" @onclick="() => showStreakLostPopup = false">Okay</button>
                </div>
            </div>
        }

        @Body
    </main>

    <!-- Footer dashboard thingy -->
    @if (!ShouldHideLayout)
    {
        <div class="footer-wrapper">
            <div class="d-flex justify-content-around align-items-center bg-light shadow-sm rounded-pill mx-auto" style="width: 90%; padding: 0.6rem 1.2rem;">
                <a href="/shop" class="footer-widget-link">
                    <img src="images/shop-footer-icon.png" alt="Shop" class="footer-widget-icon"/>
                </a>
                <a href="/" class="footer-widget-link">
                    <img src="images/home-footer-icon.png" alt="Home" class="footer-widget-icon"/>
                </a>
                <a href="/history" class="footer-widget-link">
                    <img src="images/history-footer-icon.png" alt="History" class="footer-widget-icon"/>
                </a>
                <a href="/profile" class="footer-widget-link">
                    <img src="images/513.gif" alt="Profile" class="footer-widget-icon"/>
                </a>

            </div>
        </div>
    }






</div>
