@page "/shop"
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject IJSRuntime JS
@using ChallengeUpFrontend.Models
@using System.Text.Json

<div class="shop-container text-center">
    <h2 class="shop-title mb-4">Shop</h2>

    @if (canBuyStreakRevival)
    {
        <div class="streak-card position-relative">
            <img src="images/fire-icon.png" class="shop-item-img mb-3" />
            <h5>Streak Revival</h5>
            <p class="text-muted">Restore your streak!</p>

            <button class="btn btn-primary gem-button" @onclick="BuyStreakRevival" disabled="@isBuying">
                @if (isBuying)
                {
                    <span>Processing...</span>
                }
                else
                {
                    <div class="gem-content">
                        <span>100</span>
                        <img src="images/gem-icon.png" alt="Gem" class="icon-inline" />
                    </div>
                }
            </button>

            @if (showGemAnimation)
            {
                <div class="gem-animation">
                    <img src="images/gem-icon.png" class="gem" />
                    <img src="images/gem-icon.png" class="gem delay1" />
                    <img src="images/gem-icon.png" class="gem delay2" />
                </div>
            }
        </div>
    }
    else
    {
        <p class="text-muted">Nothing available to buy right now.</p>
    }
</div>

@code {
    private UserStats? stats;
    
    bool canBuyStreakRevival = false;
    bool isBuying = false;
    bool showGemAnimation = false;

    private string[] parts;
    private string responseMessage;
    private string error;
    
    protected override async Task OnParametersSetAsync()
    {
        string StatsJson = await JS.InvokeAsync<string>("sessionStorage.getItem", "UserStats");
        stats = JsonSerializer.Deserialize<UserStats>(StatsJson);

        if (stats.Gems >= 100)
        {
            canBuyStreakRevival = true;
        }
        else
        {
            canBuyStreakRevival = false;
        }
    }

    async Task BuyStreakRevival()
    {
        isBuying = true;
        showGemAnimation = true;
        
        var url = $"http://localhost:8080/?Command=PayToReset&Extra={Uri.EscapeDataString($"{stats.Username}")}";
        responseMessage = await SendRequest(url);

        parts = responseMessage.Split(":");
            
        if (parts.Length > 1)
        {
            error = "Invalid Username/password";
        }
        else
        {
            error = null;
            NavigationManager.NavigateTo("/");
        }
        
        showGemAnimation = false;
        isBuying = false;
        Console.WriteLine("Streak Revival purchased!");
    }
    
    private async Task<string> SendRequest(string url)
    {
        try
        {
            var response = await Http.GetAsync(url);
            response.EnsureSuccessStatusCode();
            string result = await response.Content.ReadAsStringAsync();
            return result;
        }
        catch (Exception ex)
        {
            return $"Error: {ex.Message}";
        }
    }
}